// Generated by kea-typegen on Thu, 17 Aug 2023 17:57:04 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { XYCoord } from 'react-dnd/dist/index'
import type { XYCoord } from 'react-dnd/dist/types/monitors'

export interface mouseLogicType extends Logic {
    actionCreators: {
        setPosition: (coord: XYCoord) => ({
            type: "set position (src.components.mouseLogic)";
            payload: {
                coord: XYCoord;
            };
        });
        setPositionFromEvent: (e: MouseEvent) => ({
            type: "set position from event (src.components.mouseLogic)";
            payload: {
                e: MouseEvent;
            };
        });
        setMouseDown: (mouseDown: boolean) => ({
            type: "set mouse down (src.components.mouseLogic)";
            payload: {
                mouseDown: boolean;
            };
        });
    };
    actionKeys: {
        "set position (src.components.mouseLogic)": "setPosition";
        "set position from event (src.components.mouseLogic)": "setPositionFromEvent";
        "set mouse down (src.components.mouseLogic)": "setMouseDown";
    };
    actionTypes: {
        setPosition: "set position (src.components.mouseLogic)";
        setPositionFromEvent: "set position from event (src.components.mouseLogic)";
        setMouseDown: "set mouse down (src.components.mouseLogic)";
    };
    actions: {
        setPosition: (coord: XYCoord) => void;
        setPositionFromEvent: (e: MouseEvent) => void;
        setMouseDown: (mouseDown: boolean) => void;
    };
    asyncActions: {
        setPosition: (coord: XYCoord) => Promise<any>;
        setPositionFromEvent: (e: MouseEvent) => Promise<any>;
        setMouseDown: (mouseDown: boolean) => Promise<any>;
    };
    defaults: {
        position: XYCoord;
        mouseDown: boolean;
    };
    events: {};
    key: undefined;
    listeners: {
        "setPositionFromEvent": ((action: {
            type: "set position from event (src.components.mouseLogic)";
            payload: {
                e: MouseEvent;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "components",
        "mouseLogic"
    ];
    pathString: "src.components.mouseLogic";
    props: Record<string, unknown>;
    reducer: (state: any, action: any, fullState: any) => {
        position: XYCoord;
        mouseDown: boolean;
    };
    reducers: {
        position: (state: XYCoord, action: any, fullState: any) => XYCoord;
        mouseDown: (state: boolean, action: any, fullState: any) => boolean;
    };
    selector: (state: any) => {
        position: XYCoord;
        mouseDown: boolean;
    };
    selectors: {
        position: (state: any, props?: any) => XYCoord;
        mouseDown: (state: any, props?: any) => boolean;
    };
    sharedListeners: {};
    values: {
        position: XYCoord;
        mouseDown: boolean;
    };
    _isKea: true;
    _isKeaWithKey: false;
}