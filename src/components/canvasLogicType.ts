// Generated by kea-typegen on Thu, 17 Aug 2023 16:57:58 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { CanvasLogicProps } from './canvasLogic'
import type { AddableElement, AddableTool, BrushSize, CanvasInteractionHandlers, CanvasState, Tool } from '../types'

export interface canvasLogicType extends Logic {
    actionCreators: {
        addElement: (tool: AddableTool | null) => ({
            type: "add element (src.canvasLogic)";
            payload: {
                tool: AddableTool | null;
            };
        });
        setMouseDown: (mouseDown: boolean) => ({
            type: "set mouse down (src.canvasLogic)";
            payload: {
                mouseDown: boolean;
            };
        });
        initCanvas: (canvas: HTMLCanvasElement | null) => ({
            type: "init canvas (src.canvasLogic)";
            payload: {
                canvas: HTMLCanvasElement | null;
            };
        });
        selectTool: (tool: Tool) => ({
            type: "select tool (src.canvasLogic)";
            payload: {
                tool: Tool;
            };
        });
        setBrushSize: (brushSize: number) => ({
            type: "set brush size (src.canvasLogic)";
            payload: {
                brushSize: number;
            };
        });
        bakeIntoCanvas: () => ({
            type: "bake into canvas (src.canvasLogic)";
            payload: {
                value: true;
            };
        });
    };
    actionKeys: {
        "add element (src.canvasLogic)": "addElement";
        "set mouse down (src.canvasLogic)": "setMouseDown";
        "init canvas (src.canvasLogic)": "initCanvas";
        "select tool (src.canvasLogic)": "selectTool";
        "set brush size (src.canvasLogic)": "setBrushSize";
        "bake into canvas (src.canvasLogic)": "bakeIntoCanvas";
    };
    actionTypes: {
        addElement: "add element (src.canvasLogic)";
        setMouseDown: "set mouse down (src.canvasLogic)";
        initCanvas: "init canvas (src.canvasLogic)";
        selectTool: "select tool (src.canvasLogic)";
        setBrushSize: "set brush size (src.canvasLogic)";
        bakeIntoCanvas: "bake into canvas (src.canvasLogic)";
    };
    actions: {
        addElement: (tool: AddableTool | null) => void;
        setMouseDown: (mouseDown: boolean) => void;
        initCanvas: (canvas: HTMLCanvasElement | null) => void;
        selectTool: (tool: Tool) => void;
        setBrushSize: (brushSize: number) => void;
        bakeIntoCanvas: () => void;
    };
    asyncActions: {
        addElement: (tool: AddableTool | null) => Promise<any>;
        setMouseDown: (mouseDown: boolean) => Promise<any>;
        initCanvas: (canvas: HTMLCanvasElement | null) => Promise<any>;
        selectTool: (tool: Tool) => Promise<any>;
        setBrushSize: (brushSize: number) => Promise<any>;
        bakeIntoCanvas: () => Promise<any>;
    };
    defaults: {
        canvas: HTMLCanvasElement | null;
        tool: Tool;
        brushSize: BrushSize;
        canvasState: CanvasState;
    };
    events: {};
    key: number | "global";
    listeners: {
        "initCanvas": ((action: {
            type: "init canvas (src.canvasLogic)";
            payload: {
                canvas: HTMLCanvasElement | null;
            };
        }, previousState: any) => void | Promise<void>)[];
        "selectTool": ((action: {
            type: "select tool (src.canvasLogic)";
            payload: {
                tool: Tool;
            };
        }, previousState: any) => void | Promise<void>)[];
        "bakeIntoCanvas": ((action: {
            type: "bake into canvas (src.canvasLogic)";
            payload: {
                value: true;
            };
        }, previousState: any) => void | Promise<void>)[];
    };
    path: [
        "src",
        "canvasLogic"
    ];
    pathString: "src.canvasLogic";
    props: CanvasLogicProps;
    reducer: (state: any, action: any, fullState: any) => {
        canvas: HTMLCanvasElement | null;
        tool: Tool;
        brushSize: BrushSize;
        canvasState: CanvasState;
    };
    reducers: {
        canvas: (state: HTMLCanvasElement | null, action: any, fullState: any) => HTMLCanvasElement | null;
        tool: (state: Tool, action: any, fullState: any) => Tool;
        brushSize: (state: BrushSize, action: any, fullState: any) => BrushSize;
        canvasState: (state: CanvasState, action: any, fullState: any) => CanvasState;
    };
    selector: (state: any) => {
        canvas: HTMLCanvasElement | null;
        tool: Tool;
        brushSize: BrushSize;
        canvasState: CanvasState;
    };
    selectors: {
        canvas: (state: any, props?: any) => HTMLCanvasElement | null;
        tool: (state: any, props?: any) => Tool;
        brushSize: (state: any, props?: any) => BrushSize;
        canvasState: (state: any, props?: any) => CanvasState;
        elementToAdd: (state: any, props?: any) => AddableElement | null;
        mouseDown: (state: any, props?: any) => boolean;
        ctx: (state: any, props?: any) => CanvasRenderingContext2D | null | undefined;
        isAddableTool: (state: any, props?: any) => boolean;
        isDrawableTool: (state: any, props?: any) => boolean;
        canvasInteractionHandlers: (state: any, props?: any) => CanvasInteractionHandlers;
    };
    sharedListeners: {};
    values: {
        canvas: HTMLCanvasElement | null;
        tool: Tool;
        brushSize: BrushSize;
        canvasState: CanvasState;
        elementToAdd: AddableElement | null;
        mouseDown: boolean;
        ctx: CanvasRenderingContext2D | null | undefined;
        isAddableTool: boolean;
        isDrawableTool: boolean;
        canvasInteractionHandlers: CanvasInteractionHandlers;
    };
    _isKea: true;
    _isKeaWithKey: true;
    __keaTypeGenInternalSelectorTypes: {
        ctx: (canvas: HTMLCanvasElement | null) => CanvasRenderingContext2D | null | undefined;
        isAddableTool: (tool: Tool) => boolean;
        isDrawableTool: (tool: Tool) => boolean;
        canvasInteractionHandlers: (canvas: HTMLCanvasElement | null, ctx: CanvasRenderingContext2D | null | undefined, tool: Tool, mouseDown: boolean, brushSize: BrushSize) => CanvasInteractionHandlers;
    };
}