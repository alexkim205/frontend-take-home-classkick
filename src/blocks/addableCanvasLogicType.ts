// Generated by kea-typegen on Thu, 17 Aug 2023 03:58:19 GMT. DO NOT EDIT THIS FILE MANUALLY.

import type { Logic } from 'kea'

import type { CanvasLogicProps } from '../components/canvasLogic'
import type { AddableElement, AddableTool } from '../types'

export interface addableCanvasLogicType extends Logic {
    actionCreators: {
        addElement: (tool: AddableTool | null) => ({
            type: "add element (src.components.addableCanvasLogic)";
            payload: {
                tool: AddableTool | null;
            };
        });
        setElement: (element: Partial<AddableElement> | null) => ({
            type: "set element (src.components.addableCanvasLogic)";
            payload: {
                element: Partial<AddableElement> | null;
            };
        });
    };
    actionKeys: {
        "add element (src.components.addableCanvasLogic)": "addElement";
        "set element (src.components.addableCanvasLogic)": "setElement";
    };
    actionTypes: {
        addElement: "add element (src.components.addableCanvasLogic)";
        setElement: "set element (src.components.addableCanvasLogic)";
    };
    actions: {
        addElement: (tool: AddableTool | null) => void;
        setElement: (element: Partial<AddableElement> | null) => void;
    };
    asyncActions: {
        addElement: (tool: AddableTool | null) => Promise<any>;
        setElement: (element: Partial<AddableElement> | null) => Promise<any>;
    };
    defaults: {
        elementToAdd: AddableElement | null;
    };
    events: {};
    key: number;
    listeners: {};
    path: [
        "src",
        "components",
        "addableCanvasLogic"
    ];
    pathString: "src.components.addableCanvasLogic";
    props: CanvasLogicProps;
    reducer: (state: any, action: any, fullState: any) => {
        elementToAdd: AddableElement | null;
    };
    reducers: {
        elementToAdd: (state: AddableElement | null, action: any, fullState: any) => AddableElement | null;
    };
    selector: (state: any) => {
        elementToAdd: AddableElement | null;
    };
    selectors: {
        elementToAdd: (state: any, props?: any) => AddableElement | null;
    };
    sharedListeners: {};
    values: {
        elementToAdd: AddableElement | null;
    };
    _isKea: true;
    _isKeaWithKey: true;
}